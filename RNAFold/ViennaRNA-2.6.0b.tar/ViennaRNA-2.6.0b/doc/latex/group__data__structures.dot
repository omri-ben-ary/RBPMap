digraph "(Abstract) Data Structures"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir=LR;
  Node7 [label="Arrays",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__array__utils.html",tooltip="Interface for an abstract implementation of an array data structure."];
  Node8 [label="Buffers",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__buffer__utils.html",tooltip="Functions that provide dynamically buffered stream-like data structures."];
  Node1 [label="(Abstract) Data Structures",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="All datastructures and typedefs shared among the ViennaRNA Package can be found here."];
  Node4 [label="The Dynamic Programming\l Matrices",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__dp__matrices.html",tooltip="This module provides interfaces that deal with creation and destruction of dynamic programming matric..."];
  Node3 [label="The Fold Compound",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__fold__compound.html",tooltip="This module provides interfaces that deal with the most basic data structure used in structure predic..."];
  Node5 [label="Hash Tables",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__hash__table__utils.html",tooltip="Various implementations of hash table functions."];
  Node6 [label="Heaps",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__heap__utils.html",tooltip="Interface for an abstract implementation of a heap data structure."];
  Node2 [label="Utilities",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__utils.html",tooltip=" "];
  Node2->Node1 [shape=plaintext, dir="back", style="solid"];
  Node1->Node3 [shape=plaintext, dir="back", style="solid"];
  Node1->Node4 [shape=plaintext, dir="back", style="solid"];
  Node1->Node5 [shape=plaintext, dir="back", style="solid"];
  Node1->Node6 [shape=plaintext, dir="back", style="solid"];
  Node1->Node7 [shape=plaintext, dir="back", style="solid"];
  Node1->Node8 [shape=plaintext, dir="back", style="solid"];
  Node1->Node7 [shape=plaintext, label="array.h", color="darkgreen", dir="none", style="dashed"];
}
